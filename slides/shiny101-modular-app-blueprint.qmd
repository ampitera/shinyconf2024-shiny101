---
title: "Shiny 101: The Modular App Blueprint"
author: "Veerle van Leemput"
format:
  revealjs: 
    theme: [default, custom.scss]
include-in-header: 
  text: |
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
---

# Welcome Shiny dev! üëã

## Program

- **19:30 - 20:00** Introduction to Shiny
- **20:00 - 20:30** Hands-on Session: Building a Shiny App Together
- **20:30 - 20:40** Break ‚òïÔ∏è
- **20:40 - 21:00** Introduction to Shiny modules
- **21:00 - 21:30** Hands-on Session: Implementing Shiny modules
- **21:30 - 21:45** Sharing and feedback
- **21:45 - 22:00** Recap and Questions

## Learning objectives

After this workshop, you will know:

- the basics of a Shiny application
- how to make your app modular
- how to communicate between modules

You will leave this workshop with:

- a blueprint for a modular Shiny app


# Shiny app

Two parts of a Shiny app:

- **UI**: User Interface
- **Server**: Server logic

They come together in a single script: `app.R`

## The app.R script

```{.r code-line-numbers="1"}
library(shiny)

ui <- fluidPage(
  "Hello, Shiny!"
)

server <- function(input, output, session) {
}

shinyApp(ui, server)
```

## The app.R script

```{.r code-line-numbers="3-5"}
library(shiny)

ui <- fluidPage(
  "Hello, Shiny!"
)

server <- function(input, output, session) {
}

shinyApp(ui, server)
```

## The app.R script

```{.r code-line-numbers="7-8"}
library(shiny)

ui <- fluidPage(
  "Hello, Shiny!"
)

server <- function(input, output, session) {
}

shinyApp(ui, server)
```

## The app.R script

```{.r code-line-numbers="10"}
library(shiny)

ui <- fluidPage(
  "Hello, Shiny!"
)

server <- function(input, output, session) {
}

shinyApp(ui, server)
```

## The ui part

```{.r code-line-numbers="3-5"}
library(shiny)

ui <- fluidPage(
  "Hello, Shiny!"
)

server <- function(input, output, session) {
}

shinyApp(ui, server)
```

- `fluidPage()` creates a Bootstrap page

- Bootstrap is a free front-end framework used in web development and it includes all the basic to build an app that will work in a web browser on any device

- Bootstrap is built on HTML, CSS and JavaScript


## The ui part

Under the hood, every UI function is translated to HTML. With HTML, you can add rich content to your user interface like text, images, and input controls.

```{r}
library(shiny)
```

```{r}
#| echo: true
as.character(titlePanel("Hello, Shiny!"))
```

This HTML can also have styles attached to it, either by the `style` attribute, or by a CSS class.

```{r}
#| echo: true
as.character(sidebarPanel())
```


## The ui part

To let users interact with your app, you can add input controls.

Every input control, or widget, needs an `inputId`- which is a simple string
that needs to be **unique**.

Most input controls have a `label`

Most input controls also have a `value`

```{.r}
numericInput(inputId = "number", 
             label = "Enter a number", 
             value = 0)
```

```{.r}
actionButton(inputId = "button", 
             label = "Click me")
```

## The server part

When the app runs, every user gets served the same HTML from the ui.

When the user interacts with the UI, we want that HTML to react to the user.

The server logic uses reactive programming: when an input changes, all related outputs react and are updated automatically.

We need **reactive outputs**!

## The server part

Shiny has several functions that turn R objects into reactive outputs for your ui: the *Output family

Each function creates a specific type of output, for example:

| Function | Output type |
|----------|-------------|
| textOutput() | text |
| tableOutput() | table |
| plotOutput() | plot |
| uiOutput() | raw HTML |
: {.table .table-striped .table-hover}

## The server part

To let users interact with your app, you can add input controls.

Every output element needs a single argument: `outputId`- which is a simple string that needs to be **unique**.

```{.r}
textOutput(outputId = "text")
```

This textOutput tells Shiny where to display the object

Next step: tell Shiny how to build the object

## The server part

The server function builds an object named output and this object will contain all the code needed to display the R objects in your app

This output object is **list-like**

Each R object that you want to display has its own entry in this list, therefore the name of every output in your ui needs to match a definition in the server

```{.r}
output$text
```

## The server part

Each entry in the output list should contain a render* function

You must use render* functions that match the *Output functions

| Function | Output type | Render function |
|----------|-------------|-----------------|
| textOutput() | text | renderText() |
| tableOutput() | table | renderTable() |
| plotOutput() | plot | renderPlot() |
| uiOutput() | raw HTML | renderUI() |
: {.table .table-striped .table-hover}

## The server part

```{.r code-line-numbers="2-3"}
server <- function(input, output, session) {
  output$text <- renderText({
  })
}
```

## Using inputs

This works the same with inputs

The server can access an object named `input` that will contain the value of all the objects defined in the ui

This object is list like, just like the output object

Each input value has its own entry in this list:

```{.r}
input$number
```

## Connecting the dots

If we combine the input and output objects, we can create a simple app that displays the square of a number üëè.

```{.r}
library(shiny)

ui <- fluidPage(
  numericInput(inputId = "number", 
               label = "Enter a number", 
               value = 0),
               
  textOutput(outputId = "text")
)

server <- function(input, output, session) {
  output$text <- renderText({
    input$number^2
  })
}

shinyApp(ui, server)
```

## Connecting the dots

What about the `actionButton`? We could use this button as an **event** that triggers the calculation.

```{.r}
library(shiny)

ui <- fluidPage(
  numericInput(inputId = "number", 
               label = "Enter a number", 
               value = 0),
               
  actionButton(inputId = "button", 
               label = "Click me"),
               
  textOutput(outputId = "text")
)

server <- function(input, output, session) {
  output$text <- renderText({
    input$number^2
  }) |> bindEvent(input$button)
}

shinyApp(ui, server)

```

# It's all about the looks üíÖ

Only our app doesn't have any yet... üò¢

## Quickly leveling up your UI

- There are many ways to make your app look instantly better
- One of them is using `bslib` which is a package that provides a modern UI toolkit for Shiny and R Markdown based on Bootstrap

## Working with {bslib}

```{.r}
library(shiny)
library(bslib)

ui <- page_navbar(
  theme = bs_theme(version = 5),
  title = "Modular App Blueprint",
  nav_panel(
    title = "Numbers",
    numericInput(inputId = "number",
                 label = "Enter a number",
                 value = 0),
    actionButton(inputId = "button",
                 label = "Click me"),
    textOutput(outputId = "text")
  )
)

server <- function(input, output, session) {
  output$text <- renderText({
    input$number^2
  }) |> bindEvent(input$button)
}

shinyApp(ui, server)
```

## Working with {bslib}

```{.r code-line-numbers="4-14,17"}
library(shiny)
library(bslib)

custom_theme <- bs_theme(
  version = 5,
  bg = "#F9F9F9",
  fg = "#003f5c",
  primary = "#bc5090",
  secondary = "#58508d",
  warning = "#ffa600",
  danger = "#ff6361",
  info = "#0091d5",
  base_font = font_google("PT Sans")
)

ui <- page_navbar(
  theme = custom_theme,
  title = "Modular App Blueprint",
  nav_panel(
    title = "Numbers",
    numericInput(inputId = "number",
                 label = "Enter a number",
                 value = 0),
    actionButton(inputId = "button",
                 label = "Click me",
                 width = "100px"),
    textOutput(outputId = "text")
  )
)

server <- function(input, output, session) {
  output$text <- renderText({
    input$number^2
  }) |> bindEvent(input$button)
}

shinyApp(ui, server)
```
